#include <iostream>
using namespace std;
  
// function to heapify the tree
void heapify(int arr[], int n, int root)
{
  // build heapify
  int left = 2*root + 1;
  int right = 2*root + 2;
  int largest;
  
  //finding if the root is the largest out of the 2 childern
  if((left < n) && (arr[left] > arr[root])){
      largest = left;
  }else{
      largest = root;
      
  }if((right < n) && (arr[right] > arr[largest])){
      largest = right;
      // if root is not the largest then swaps it with the largest
      // element and hepify considering that largest number as the root
       }if(largest != root){
    swap(arr[root],arr[largest]);
      heapify(arr, n, largest);
  }
}
  
// implementing heap sort
void heapSort(int arr[], int n)
{
  // build heap
  
  //As the intenal nodes goes from 0 to n/2 -1
  for (int i = n/2 - 1 ; i>= 0; i--){
      heapify(arr, n, i);
  }
  
  // extracting elements from heap one by one
  for (int i = n - 1; i >= 0; i -- ){
      /* first element is the highest element of the root
       after then swaps it with the last element of the array
       largest element is in the correct place
        Then recursively do this to the array without the last element
      */ 
      swap(arr[0], arr[i]);
      heapify(arr, i, 0);
  }
}
  
/* print contents of array */
void displayArray(int arr[], int n)
{
   for (int i=0; i<n; ++i)
   cout << arr[i] << " ";
   cout << "\n";
}
  
// main program
int main()
{
   int heap_arr[] = {4,17,3,12,9,6};
   int n = sizeof(heap_arr)/sizeof(heap_arr[0]);
   cout<<"Input array"<<endl;
   displayArray(heap_arr,n);
  
   heapSort(heap_arr, n);
  
   cout << "Sorted array"<<endl;
   displayArray(heap_arr, n);
}
